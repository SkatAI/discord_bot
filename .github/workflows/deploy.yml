# Deploy for github actions

# You can change the following default setups
# - branch: master
# - name: DeployDiscordBot
# - filename of the python script: main

name: DeployDiscordBot

# Triggers only when code is pushed to the master branch
on:
  push:
    branches: [master]

jobs:
  deploy: # Separate job for deployment
    runs-on: ubuntu-latest # Uses the latest Ubuntu runner provided by GitHub

    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v2

      # Step 2: Set up SSH for deployment
      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      # Step 3: Test SSH connection
      - name: Test connection
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "pwd"

      # Step 4: Create bot directory on VM droplet if it doesn't exist
      - name: Create bot directory
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "mkdir -p ~/bots/${{ github.repository_owner }}"

      # Step 5: Copy files from repo to VM ./bots/username/ folder
      - name: Copy files to the server
        run: |
          scp -r ./* ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:~/bots/${{ github.repository_owner }}/

      # Step 6: Copy .env secrets file to bot folder
      - name: cp .env secrets file to bot folder
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "cp ~/credentials/.env ~/bots/${{ github.repository_owner }}/"

      # Step 7: Build and run with docker-compose
      - name: Build and run with docker compose -d --build
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "cd ~/bots/${{ github.repository_owner }} && docker compose up -d --build"
